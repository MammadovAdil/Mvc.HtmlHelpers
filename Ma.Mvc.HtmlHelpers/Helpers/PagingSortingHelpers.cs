using Ma.Mvc.HtmlHelpers.Helpers.SortingControlFor.Abstract;
using Ma.Mvc.HtmlHelpers.Helpers.SortingControlFor.Concrete;
using Ma.Mvc.HtmlHelpers.Infrastructure;
using Ma.Mvc.HtmlHelpers.Models;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Web.Mvc;
using System.Web.Routing;

namespace Ma.Mvc.HtmlHelpers.Helpers
{
    public static class PagingSortingHelpers
    {
        /// <summary>
        /// Generate page urls according to
        /// url generator and paging info.
        /// </summary>
        /// <param name="helper">HtmlHelper.</param>        
        /// <param name="pagingInfo">Information about paging.</param>
        /// <param name="pageUrlGenerator">Url generator for pages.</param>
        /// <returns>Generated html links.</returns>
        public static MvcHtmlString PageLinks(
            this HtmlHelper helper,
            PagingInfo pagingInfo,
            Func<int, string> pageUrlGenerator)
        {
            return helper.PageLinks(pagingInfo, pageUrlGenerator, null);
        }

        /// <summary>
        /// Generate page urls according to
        /// url generator and paging info.
        /// </summary>
        /// <param name="helper">HtmlHelper.</param>        
        /// <param name="pagingInfo">Information about paging.</param>
        /// <param name="pageUrlGenerator">Url generator for pages.</param>
        /// <param name="htmlAttributes">Html attributes to add to links.</param>
        /// <returns>Generated html links.</returns>
        public static MvcHtmlString PageLinks(
            this HtmlHelper helper,
            PagingInfo pagingInfo,
            Func<int, string> pageUrlGenerator,
            object htmlAttributes)
        {
            if (pagingInfo == null)
                throw new ArgumentNullException(nameof(pagingInfo));

            if (pageUrlGenerator == null)
                throw new ArgumentNullException(nameof(pageUrlGenerator));

            string pagingContainerCss = "paging-container";
            string pageLinkCss = "page-link";
            string selectedLinkCss = "selected";

            // Convert html attributes
            RouteValueDictionary attributes = HtmlHelper
                .AnonymousObjectToHtmlAttributes(htmlAttributes);

            // Initialize function to generate page link
            Func<int, FluentTagBuilder> constructPageLink = pageIndex => new FluentTagBuilder("a")
                    .AddCssClass(pageLinkCss)
                    .MergeAttribute("href", pageUrlGenerator(pageIndex))
                    .SetInnerText(pageIndex.ToString());

            // Initialize function to constryct seperator dots
            Func<FluentTagBuilder> constructSeperatorDots = () => new FluentTagBuilder("span")
                .SetInnerText("...");

            FluentTagBuilder pagingContainer = new FluentTagBuilder("div")
                .AddCssClass(pagingContainerCss);

            int lastPageIndex = pagingInfo.TotalPageCount;

            /// First of all define begining and ending index of page
            /// links which will be generated by loop. Maximum number of
            /// 9 pages can be generated by loop. First and last pages are added
            /// manually.

            // Maximum number of 4 pages should be rendered
            // before and after current page
            int rangeBeginIndex = Math.Max(2, pagingInfo.CurrentPage - 4);
            int rangeEndIndex = Math.Min(lastPageIndex - 1, pagingInfo.CurrentPage + 4);

            /// If there are more than 11 page links then 9 of them must be
            /// rendered by loop, otherwise all links must be displayed.                

            // Get total count of page links which must be generated by loop.
            int totalCountOfPageLinksByLoop = Math.Min(lastPageIndex - 2, 9);

            /// Get current count of page links which will be generated by loop
            /// with current settings. For expample, if maximum page count is 100
            /// and current page is 4, then two pages before current page (2, 3),
            /// current page itself and 4 pages after current page (5, 6, 7, 8)
            /// will be generated by loop. This means that total of 2 + 1 + 4 = 7
            /// pages will be generated by loop, but this number must be 9.
            /// To accomplish this we have to add remaning pages from "before the current page"
            /// to the pages after current page. 4 must be generated before current page
            /// but this number is 2, then total of 6 pages should be generated after
            /// current page (5, 6, 7, 8, 9, 10).
            int currentPageCountByLoop = rangeEndIndex - rangeBeginIndex + 1;
            if (totalCountOfPageLinksByLoop > 5
                && currentPageCountByLoop < totalCountOfPageLinksByLoop)
            {
                // Find remaing page count.
                // In the example above this is 4 - 2 = 2.
                int remainingPageCount = totalCountOfPageLinksByLoop - currentPageCountByLoop;

                // Add remaining pages to the before or after the current page.
                if (rangeBeginIndex == 2)
                    rangeEndIndex += remainingPageCount;
                else if (rangeEndIndex == lastPageIndex - 1)
                    rangeBeginIndex -= remainingPageCount;
            }

            // Add first page
            if (lastPageIndex >= 1)
            {
                FluentTagBuilder firstPage = constructPageLink(1)
                    .MergeAttributes(attributes);
                if (1 == pagingInfo.CurrentPage)
                    firstPage.AddCssClass(selectedLinkCss);
                pagingContainer.AppendChild(firstPage);

                // Add seperator dots there is gap between first page
                // and loop range begin index.
                if (rangeBeginIndex - 1 > 1)
                    pagingContainer.AppendChild(constructSeperatorDots());
            }            

            // Add begaes in-between first and last
            for (int i = rangeBeginIndex; i <= rangeEndIndex; i++)
            {
                FluentTagBuilder pageLink = constructPageLink(i)
                    .MergeAttributes(attributes);

                // Add selected class if needed
                if (i == pagingInfo.CurrentPage)
                    pageLink.AddCssClass(selectedLinkCss);

                pagingContainer.AppendChild(pageLink);
            }

            // Add last page if needed
            if (lastPageIndex > 1)
            {
                // Add seperator dots if there is a gap between last page
                // and loop range end index.
                if (lastPageIndex - rangeEndIndex > 1)
                    pagingContainer.AppendChild(constructSeperatorDots());

                FluentTagBuilder lastPage = constructPageLink(lastPageIndex)
                    .MergeAttributes(attributes);
                if (lastPageIndex == pagingInfo.CurrentPage)
                    lastPage.AddCssClass(selectedLinkCss);
                pagingContainer.AppendChild(lastPage);
            }

            return MvcHtmlString.Create(pagingContainer.Render());
        }


        /// <summary>
        /// Generate sorting control for selected property.
        /// </summary>
        /// <typeparam name="TModel">Type of model.</typeparam>
        /// <typeparam name="TProperty">Type of selected property.</typeparam>
        /// <param name="helper">HtmlHelper.</param>
        /// <param name="expression">Expression which selects property to generate sorting control for.</param>
        /// <returns>Instance of ISortingControlBuilder.</returns>
        public static ISortingControlBuilder<TProperty> SortingControlFor<TModel, TProperty>(
            this HtmlHelper<TModel> helper,
            Expression<Func<TModel, IEnumerable<TProperty>>> expression)
            where TModel : class
            where TProperty : class
        {
            if (expression == null)
                throw new ArgumentNullException(nameof(expression));

            // Initialize strongly typed helper according to sleected property
            HtmlHelper<TProperty> htmlHelper = new HtmlHelper<TProperty>(
                helper.ViewContext, new ViewPage());
            // Set TemplatedInfo just in case
            htmlHelper.ViewData.TemplateInfo = helper.ViewData.TemplateInfo;

            // Initialize sorting control
            SortingControlBuilder<TProperty> builder =
                new SortingControlBuilder<TProperty>(htmlHelper);

            return builder;
        }
    }
}